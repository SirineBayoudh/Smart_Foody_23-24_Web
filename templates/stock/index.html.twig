{% extends 'base_back.html.twig' %}

  {% block body %}
      <div class="col-lg-20 grid-margin stretch-card">
          <div class="card">
            <div class="card-body">
                
              <h4 class="card-title"> Table Stock </h4>
              <div class="col-lg-6 grid-margin grid-margin-lg-0 stretch-card">
                <div class="card">
                    <div class="card-body">
                        <canvas id="barChart" width="300" height="200"></canvas>
                    </div>
                </div>
            </div>
           
              <div class="row mb-4">
                <div class="col text-right mb-4">
                    <a id="addButton" href="{{ path('app_ajouter_stock') }}?mode=ajouter"class="btn btn-primary hover-effect" style="background-color: #56ab2f; border-color: #56ab2f;" 
                       onmouseover="this.style.backgroundColor='#bbddab'; this.style.color=''; this.style.borderColor='#bbddab';" 
                       onmouseout="this.style.backgroundColor='#56ab2f'; this.style.color=''; this.style.borderColor='#56ab2f';">
                        <i class="ti-plus"></i>
                        Ajouter un stock
                    </a>
                </div>
            </div>
              <div class="table-responsive">
                <table class="table table-hover" style="margin:auto">
                  <thead>
                    <tr>
                      <tr>
                          <th>Nom du stock</th>
                          <th>Marque</th>
                          <th>Quantités</th>
                          <th>Nombre vendus</th>
                          <th>Cout</th>
                      
                          {% if app.request.attributes.get('_route') == 'stock_get' %}
                            <th>Date </th>
                        {% elseif app.request.attributes.get('_route') == 'stock_venir' %}
                            <th>Date d'Arrivage Prévue</th>
                        {% endif %}
                        <th>Image</th>
                        <th>Actions</th>
                      </tr>
                    </tr>
                  </thead>
                  <tbody> 
                
                        {# {% for s in stocks %} #}
                            
                            {% for s in pagination %}
                          {# <tr  ><td class="py-1">{{ s.getRefProduit().getCategorie() }}</td> #}
                          
                              <td class="py-1" >{{ s.nom }}</td>
                          
                              <td >{{ s.marque }}</td>
                              <td style="font-size: 12px;">{{ s.quantite }}</td>
                              <td style="font-size: 12px;">{{ s.nbvendu }}</td>
                          

                              <td >{{ s.cout }}</td>
                              <td style="font-size: 12px;">{{ s.dateArrivage|date('Y-m-d') }}</td>
                              <td><img src="{{ asset('images/' ~ s.image) }}" alt="Image"></td>
                              <td> 
                                    <a  href="{{ path('stock_edit', {id: s.id_s}) }}?mode=modifier" enctype="multipart/form-data" class="btn btn-warning btn-sm" title="Modifier" style="background-color: #56ab2f; border-color: #56ab2f; transition: background-color 0.3s, border-color 0.3s;"
                              onmouseover="this.style.backgroundColor='#bbddab'; this.style.color=''; this.style.borderColor='#bbddab';" 
                              onmouseout="this.style.backgroundColor='#56ab2f'; this.style.color=''; this.style.borderColor='#56ab2f';">
                               <i class="ti-pencil-alt"></i>
                           </a></td>
                              {# <td>
                                  <a href="{{ path('stock_update', {id: s.id_s}) }}">
                                      <button type="button" class="btn btn-warning">Modifier</button>
                                  </a>
                              </td> #}
                              <td>
                                <a  href="#"  onclick="confirmSuppression('{{ path('stock_delete', {id: s.id_s}) }}'); return false;"class="btn btn-danger btn-sm" title="Supprimer" onclick="return confirm('Êtes-vous sûr de vouloir supprimer ce produit ?');" style="background-color: #56ab2f; border-color: #56ab2f; transition: background-color 0.3s, border-color 0.3s;"
                                onmouseover="this.style.backgroundColor='#bbddab'; this.style.color=''; this.style.borderColor='#bbddab';" 
                                onmouseout="this.style.backgroundColor='#56ab2f'; this.style.color=''; this.style.borderColor='#56ab2f';">
                                 <i class="ti-trash"></i>
                             </a> 
                            </td> </tr>
                        {% endfor %}
                    {# {% endfor %} #}
                  </tbody>
                </table>
                
              </div>
              <div class="d-flex justify-content-center">
                {% do pagination.setPageRange(2) %}
                {{ knp_pagination_render(pagination, 'pagination.html.twig') }}
            </div>
       
  {% for flash_message in app.session.flashbag.get('danger') %}
      <div class="alert alert-danger" role="alert">
          {{ flash_message }}
      </div>
  {% endfor %}
</div>


<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function confirmSuppression(url) {
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: "btn btn-success",
                cancelButton: "btn btn-danger"
            },
            buttonsStyling: false
        });

        swalWithBootstrapButtons.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "No, cancel!",
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                // Effectuer la suppression en envoyant une requête AJAX
                var xhr = new XMLHttpRequest();
                xhr.open("DELETE", url, true);
                xhr.onload = function() {
                    if (xhr.status === 200) {
                        // La suppression a réussi
                        swalWithBootstrapButtons.fire({
                            title: "Deleted!",
                            text: "Your file has been deleted.",
                            icon: "success"
                        }).then(() => {
                            // Recharger la page après la suppression réussie
                            window.location.reload();
                        });
                    } else {
                        // La suppression a échoué
                        swalWithBootstrapButtons.fire({
                            title: "Error",
                            text: "Failed to delete the file.",
                            icon: "error"
                        });
                    }
                };
                xhr.send();
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                swalWithBootstrapButtons.fire({
                    title: "Cancelled",
                    text: "Your imaginary file is safe :)",
                    icon: "error"
                });
            }
        });
    }
</script>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Récupération des données depuis Twig
        const dataFromTwig = {
            stocks: [
                {% for stock in stocks %}
                    {
                        id: {{ stock.id_s }},
                        nom: "{{ stock.nom }}",
                        nbvendu: {{ stock.nbvendu }}
                    },
                {% endfor %}
            ]
        };
        
        // Générer des couleurs aléatoires pour chaque barre
        function generateRandomColor() {
            const r = Math.floor(Math.random() * 256);
            const g = Math.floor(Math.random() * 256);
            const b = Math.floor(Math.random() * 256);
            return `rgba(${r}, ${g}, ${b}, 0.5)`;
        }

        // Créer un tableau de couleurs aléatoires pour chaque barre
        const colors = Array.from({ length: dataFromTwig.stocks.length }, () => generateRandomColor());

        // Création du bar chart
        var ctx = document.getElementById('barChart').getContext('2d');
        var barChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: dataFromTwig.stocks.map(stock => stock.nom), // Utiliser les noms des stocks comme étiquettes sur l'axe x
                datasets: [{
                    label: 'Nombre vendu',
                    data: dataFromTwig.stocks.map(stock => stock.nbvendu), // Utiliser les nombres vendus comme valeurs sur l'axe y
                    backgroundColor: colors, // Utiliser les couleurs aléatoires générées
                    borderColor: 'rgba(255,255,255,1)',
                    borderWidth: 1 // Épaisseur de la bordure
                }]
            },
            options: {
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Stock' // Titre de l'axe des abscisses
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Nombre vendu par stock'
                        },
                        ticks: {
                            stepSize: 10 // Définir l'intervalle de 10 sur l'axe y
                        }
                    }
                },
                title: {
                    display: true,
                    text: 'Nombre vendus par stock', // Titre du graphique à barres
                    font: {
                        size: 18 // Taille de la police du titre
                    }
                }
            }
        });
    });
</script>



{% endblock %}
  
  {% block stylesheets %}
      <style>
          .selected {
              background-color: red;
          }
          
          /* CSS pour réduire la largeur du tableau */
          .table-responsive {
              max-width: 30%; /* Vous pouvez ajuster la valeur selon vos besoins */
            
          }
      </style>
  {% endblock %}
  {# {% block javascripts %} #}
      {# <script>
          $(document).ready(function() {
              $('#btnAjouter').click(function() {
                  $('#addStockModal').modal('show');
              });
              
              $('.btnModifier').click(function() {
          var id_s = $(this).data('id');
          var formAction = '{{ path('stock_edit', {id: 'ID'}) }}'.replace('ID', id_s);
          $('#updateStockForm').attr('action', formAction);
      });
          });
      </script>
      {% endblock %} #}
      {% block javascripts %}
          <script>
              document.addEventListener("DOMContentLoaded", function() {
                  var addButton = document.querySelector("#addButton");
                  addButton.addEventListener("click", function() {
                      window.location.href = "{{ path('app_ajouter_stock') }}?mode=ajouter";
                  });
          
                  var editButton = document.querySelector("#editButton");
                  editButton.addEventListener("click", function() {
                      window.location.href = "{{ path('app_ajouter_stock') }}?mode=modifier";
                  });
              });
          </script>
          
      {% endblock %}